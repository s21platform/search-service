name: Dev CI/CD to Development server
on:
  pull_request:
    branches:
      - main

env:
  GO_VERSION: '1.24.3'
  GOLANGCI_LINT_VERSION: 'v1.57.2'
  DOCKER_IMAGE: ${{ secrets.CR_REGISTRY }}/${{ secrets.CR_NAME }}:develop

jobs:
  linters:
    name: Run linters
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | \
          sh -s -- -b $(go env GOPATH)/bin ${{ env.GOLANGCI_LINT_VERSION }}
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

      - name: Run golangci-lint
        run: golangci-lint run --timeout 5m

  test:
    name: Run tests
    runs-on: ubuntu-latest
    needs: linters
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run tests
        run: |
          go test -coverprofile=coverage.out -tags=test -v ./...
          go tool cover -func=coverage.out | grep total:

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.out

  build_and_push:
    name: Build and Push Image to YC
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Yandex Container Registry
        uses: yc-actions/yc-cr-login@v1
        with:
          yc-sa-json-credentials: ${{ secrets.YC_KEY }}
          registry: cr.yandex
          region: ru-central1

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.DOCKER_IMAGE }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build_and_push
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.HOST_DEVELOP }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.PRIVATE_SSH_KEY_DEVELOP }}
          passphrase: ${{ secrets.PASSPHRASE_DEVELOP }}
          script: |
            docker pull ${{ env.DOCKER_IMAGE }}
            docker compose -f ~/space21/staging/staging-deployment/docker-compose.yml \
              --env-file ~/space21/staging/.env up -d --force-recreate ${{ secrets.CR_NAME }}
            docker system prune -f