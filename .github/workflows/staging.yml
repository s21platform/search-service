name: Dev CI/CD to Development server
on:
  pull_request:
    branches:
      - main


jobs:
  linters:
    name: Run linters
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24.3'

      - name: Run golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.57.2
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH


  test:
    name: Run tests
    runs-on: ubuntu-latest
    needs: linters

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24.3'

      - name: Run tests
        run: go test -coverprofile=coverage.out -tags=test -v ./...

      #      - name: Check coverage
      #        run: |
      #          go tool cover -func=coverage.out -o=coverage.txt
      #          coverage=$(go tool cover -func=coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
      #          echo "Coverage is $coverage%"
      #          if (( $(echo "$coverage < 80.0" | bc -l) )); then
      #          echo "Coverage is below 80%"
      #          exit 1
      #          fi

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.txt
  build_and_push:
    name: Build and Push Image to YC
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Yandex CR Login
        uses: yc-actions/yc-cr-login@v0.1-alpha
        with:
          yc-sa-json-credentials: ${{ secrets.YC_KEY }}
      - name: Build and Push to YC
        run: |
          docker build -t ${{ secrets.CR_REGISTRY }}/${{ secrets.CR_NAME }}:develop .
          docker push ${{ secrets.CR_REGISTRY }}/${{ secrets.CR_NAME }}:develop
#          docker build -t ${{ secrets.CR_REGISTRY }}/${{ secrets.CR_NAME }}-migrate:develop ./migrations
#          docker push ${{ secrets.CR_REGISTRY }}/${{ secrets.CR_NAME }}-migrate:develop
  deploy:
    runs-on: ubuntu-latest
    build_and_push:
      name: Build and Push Image to YC
      runs-on: ubuntu-latest
      needs: test
      steps:
        - name: Checkout code
          uses: actions/checkout@v3

        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v2

        - name: Login to Yandex CR
          uses: yc-actions/yc-cr-login@v0.1-alpha
          with:
            yc-sa-json-credentials: ${{ secrets.YC_KEY }}

        - name: Build and Push
          run: |
            docker build \
              --build-arg GO_VERSION=1.24.3 \
              -t ${{ secrets.CR_REGISTRY }}/${{ secrets.CR_NAME }}:develop .
            docker push ${{ secrets.CR_REGISTRY }}/${{ secrets.CR_NAME }}:develop